/*

    DAF Display - Copyleft & -right 2023 by IN5O.

*/

let compressedLyrics = `1A1L2E1S1 1I1S1T1 1K1U1N1S1T1.1
1A1L2E1S1 1A1N1 1D1I1R1 1I1S1T1 1K1U1N1S1T1.1
1D1U1 1B1I1S1T1 1S1O1 1P1L1A1S1T1I1S1C1H1.1
1U1N1D1 1S1C1H1M1E1C1K1S1T1 1W1E1M1 1G1U1T1.1
1D1E1I1N1 1K1Ö1R1P1E1R1 1I1S1T1 1S1O1 1K1Ü1N1S1T1L1I1C1H1.1
1U1N1D1 1D1I1E1 1F1R1U1C1H1T1 1I1N1 1D1E1I1N1E1M1 1L1E1I1B1 1S1O1 1K1U1N1S1T1V1O1L2.1
1P1L1A1S1T1I1S1C1H1.1
1D1E1U1T1S1C1H1L1A1N1D1,1 1D1E1U1T1S1C1H1L1A1N1D1,1 1A1L2E1S1 1I1S1T1 1V1O1R1B1E1I1.1
1D1E1I1N1 1G1E1S1I1C1H1T1 1I1S1T1 1S1O1 1E1L1A1S1T1I1S1C1H1.1
1A1L2E1S1 1A1N1 1D1I1R1 1I1S1T1 1K1U1N1S1T1S1T1O1F2.1
1S1P1I1E1L1Z1E1U1G1 1A1U1S1 1S1I1L1B1E1R1 1S1P1I1E1L1Z1E1U1G1 1A1U1S1 1G1O1L1D1.1
1D1E1R1 1S1T1O1F2 1A1U1S1 1D1E1M1 1D1I1E1 1K1U1N1S1T1 1I1S1T1.1
1D1U1 1B1I1S1T1 1D1E1R1 1A1B1F1A1L2.1
1D1E1N2 1D1U1 1B1I1S1T1 1K1U1N1S1T1S1T1O1F2.1
1D1E1I1N1 1L1E1B1E1N1 1I1S1T1 1S1O1 1K1Ü1N1S1T1L1I1C1H1.1
1W1E1I1L1 1D1U1 1E1I1N1 1K1Ü1N1S1T1L1E1R1 1B1I1S1T1.1
1D1R1Ü1C1K1 1D1I1C1H1 1A1N1 1M1I1C1H1.1
1S1O1 1F1E1S1T1 1W1I1E1 1D1U1 1K1A1N2S1T1.1
1K1Ü1S2 1M1I1C1H1.1
1V1E1R1L1I1E1R1 1M1I1C1H1 1B1I1T2E1 1N1I1C1H1T1.1
1K1Ü1S2 1M1I1C1H1,1 1M1E1I1N1 1L1I1E1B1L1I1N1G1.1
1A1L1S1 1W1Ä1R1'1 1E1S1 1D1A1S1 1L1E1T1Z1T1E1 1M1A1L1.1
1B1I1T2E1 1T1U1 1S1O1,1 1A1L1S1 1W1Ä1R1'1S1 1D1A1S1 1L1E1T1Z1T1E1 1M1A1L1.1
1S1O1 1V1I1E1L1 1W1I1E1 1D1U1 1K1A1N2S1T1.1
1G1I1B1 1M1I1R1 1S1O1 1V1I1E1L1 1W1I1E1 1D1U1 1K1A1N2S1T1.1
1L1I1E1B1E1 1M1I1C1H1,1 1M1E1I1N1 1L1I1E1B1L1I1N1G1.1
1A1L1S1 1W1Ä1R1'1S1 1D1A1S1 1L1E1T1Z1T1E1 1M1A1L1.1
1G1L1A1U1B1 1M1I1R1,1 1M1E1I1N1 1L1I1E1B1L1I1N1G1.1
1I1C1H1 1L1I1E1B1 1D1I1C1H1,1 1M1E1I1N1 1L1I1E1B1L1I1N1G1.1
1G1I1B1 1M1I1R1 1D1E1I1N1E1 1K1Ü1S2E1.1
1L1I1E1B1 1M1I1C1H1.1
1O1H1,1 1L1I1E1B1 1M1I1C1H1.1
1S1C1H1N1E1L2.1
1S1O1 1V1I1E1L1 1W1I1E1 1D1U1 1K1A1N2S1T1.1
1D1R1Ü1C1K1 1D1I1C1H1 1F1E1S1T1 1A1N1 1M1I1C1H1.1
1L1I1E1B1L1I1N1G1S1,1 1L1I1E1B1E1 1M1I1C1H1.1
1O1H1,1 1L1I1E1B1E1 1M1I1C1H1.1
1L1I1E1B1E1 1M1I1C1H1 1M1E1I1N1 1L1I1E1B1L1I1N1G1.1
1O1,1 1K1I1N1D1E1R1.1
1O1,1 1K1I1N1D1E1R1 1S1I1N1D1 1G1R1A1U1S1A1M1.1
1K1I1N1D1E1R1 1B1R1A1U1C1H1E1N1 1G1O1L1D1.1
1K1I1N1D1E1R1 1B1R1A1U1C1H1E1N1 1S1I1L1B1E1R1.1
1O1,1 1G1E1B1T1 1U1N1S1 1U1N1S1E1R1 1G1O1L1D1.1
1G1E1B1T1 1U1N1S1 1G1O1L1D1.1
1O1,1 1G1E1B1T1 1U1N1S1 1G1O1L1D1.1
1O1,1 1G1E1B1T1 1U1N1S1 1S1P1I1E1L1Z1E1U1G1.1
1O1,1 1S1C1H1Ö1N1E1S1 1S1P1I1E1L1Z1E1U1G1.1
1U1N1S1E1R1E1 1K1L1E1I1D1U1N1G1 1I1S1T1 1S1O1 1S1C1H1W1A1R1Z1.1
1U1N1S1E1R1E1 1S1T1I1E1F1E1L1 1S1I1N1D1 1S1O1 1S1C1H1W1A1R1Z1.1
1L1I1N1K1S1 1D1E1N1 1R1O1T1E1N1 1B1L1I1T1Z1.1
1R1E1C1H1T1S1 1D1E1N1 1S1C1H1W1A1R1Z1E1N1 1S1T1E1R1N1.1
1U1N1S1E1R1 1T1A1N1Z1 1I1S1T1 1S1O1 1W1I1L1D1.1
1K1E1B1A1B1.1
1R1E1C1H1T1S1 1D1E1N1 1R1O1T1E1N1 1B1L1I1T1Z1.1
1U1N1D1 1L1I1N1K1S1 1D1E1N1 1S1C1H1W1A1R1Z1E1N1 1S1T1E1R1N1.1
1A1L2E1 1G1E1G1E1N1 1A1L2E1.1
1U1N1S1E1R1E1 1F1A1R1B1E1N1 1S1I1N1D1 1S1O1 1G1R1E1L2.1
1U1N1S1E1R1E1 1S1C1H1R1E1I1E1 1S1I1N1D1 1S1O1 1L1A1U1T1.1
1E1I1N1 1N1E1U1E1R1 1B1Ö1S1E1R1 1T1A1N1Z1.1
1U1N1S1E1R1E1 1S1T1I1E1F1E1L1 1S1I1N1D1 1S1O1 1S1C1H1Ö1N1.1
1U1N1S1E1R1 1T1A1N1Z1 1I1S1T1 1V1O1L2E1R1 1M1A1C1H1T1.1
1L1I1N1K1S1 1D1E1N1 1B1L1I1T1Z1.1
1U1N1D1 1R1E1C1H1T1S1 1D1E1N1 1S1T1E1R1N1.1
1U1N1D1 1R1E1C1H1T1S1 1D1E1N1 1S1C1H1W1A1R1Z1E1N1 1S1T1E1R1N1.1
1A1L1S1 1W1Ä1R1'1 1E1S1 1D1A1S1 1L1E1T1Z1T1E1 1M1A1L1,1 1O1H1 1L1I1E1B1L1I1N1G1.1
1S1O1 1V1I1E1L1 1W1I1E1 1D1U1 1K1A1N2S1T1,1 1S1O1 1V1I1E1L1 1W1I1E1 1D1U1 1K1A1N2S1T1.1
1I1C1H1 1U1N1D1 1I1C1H1 1I1M1 1W1I1R1K1L1I1C1H1E1N1 1L1E1B1E1N1.1
1I1C1H1 1U1N1D1 1I1C1H1 1I1N1 1D1E1R1 1W1I1R1K1L1I1C1H1K1E1I1T1.1
1I1C1H1 1U1N1D1 1I1C1H1 1I1N1 1D1E1R1 1E1C1H1T1E1N1 1W1E1L1T1.1
1I1C1H1 1F1Ü1H1L1E1 1M1I1C1H1 1S1O1 1S1E1L1T1S1A1M1.1
1D1I1E1 1W1I1R1K1L1I1C1H1K1E1I1T1 1K1O1M2T1.1
1K1E1B1A1B1T1R1Ä1U1M1E1 1I1N1 1D1E1R1 1M1A1U1E1R1S1T1A1D1T1.1
1T1Ü1R1K1-1K1Ü1L1T1Ü1R1 1H1I1N1T1E1R1 1S1T1A1C1H1E1L1D1R1A1H1T1.1
1N1E1U1-1I1Z1M1I1R1 1I1S1T1 1I1N1 1D1E1R1 1D2R1.1
1A1T1A1T1Ü1R1K1 1D1E1R1 1N1E1U1E1 1H1E1R2.1
1M1I1L1I1Y1E1T1 1F1Ü1R1 1D1I1E1 1S1O1W1J1E1T1-1U1N1I1O1N1.1
1I1N1 1J1E1D1E1R1 1I1M1B1I1S3T1U1B1E1 1E1I1N1 1S1P1I1O1N1.1
1I1M1 1Z1K1 1A1G1E1N1T1 1A1U1S1 1T1Ü1R1K1E1I1.1
1D1E1U1T1S1C1H1L1A1N1D1,1 1D1E1U1T1S1C1H1L1A1N1D1,1 1A1L2E1S1 1I1S1T1 1V1O1R1B1E1I1.1
1W1I1R1 1S1I1N1D1 1D1I1E1 1T1Ü1R1K1E1N1 1V1O1N1 1M1O1R1G1E1N1.1
1S1C1H1Ö1N1 1U1N1D1 1J1U1N1G1 1U1N1D1 1S1T1A1R1K1.1
1D1U1 1B1I1S1T1 1S1C1H1Ö1N1 1U1N1D1 1J1U1N1G1 1U1N1D1 1S1T1A1R1K1.1
1N1I1M2 1D1I1R1 1W1A1S1 1D1U1 1W1I1L2S1T1.1
1S1O1L1A1N1G1E1 1D1U1 1N1O1C1H1 1K1A1N2S1T1.1
1V1E1R1S1C1H1W1E1N1D1E1 1D1E1I1N1E1 1J1U1G1E1N1D1.1
1T1U1 1W1A1S1 1D1U1 1W1I1L2S1T1.1
1D1U1 1B1I1S1T1 1S1C1H1Ö1N1.1
1U1N1D1 1D1U1 1B1I1S1T1 1J1U1N1G1.1
1U1N1D1 1N1I1M2 1D1I1R1 1W1A1S1 1D1U1 1W1I1L2S1T1.1
1S1O1L1A1N1G1E1 1D1U1 1N1O1C1H1 1J1U1N1G1 1B1I1S1T1.1
1D1U1 1B1I1S1T1 1J1U1N1G1.1
1U1N1D1 1D1U1 1B1I1S1T1 1S1T1A1R1K1.1`

let lyrics
let usedIndices = []
let sentences = []
let sentence = "PAUL WAR MAL PUNK."
let displaytime = 15000 // Milliseconds
let font_size = 72
let minFontSize = 10 
let maxFontSize = 320 
let border_left = 30
let border_bottom = font_size - font_size * 0.2
let currentLength = 0 
let typingSpeed = 0.1
let cursorVisible = true; 
let cursorBlinkRate = 30; // Blink rate (number of frames per blink)
let displaySentence = true; // Global variable to black-out the display
let cursorHidden = false;
let currentLyricsSet = 'DAF';

function decompressRLE(str) {
    let decompressed = '';
    let number = '';

    for (let i = 0; i < str.length; i++) {
        if (isNaN(str[i])) {
            decompressed += str[i].repeat(number);
            number = '';
        } else {
            number += str[i];
        }
    }

    return decompressed;
}

function updateSentence() {
    sentences = lyrics.split('\n').filter(line => line.length > 0);
    sentence = getRandomSentence();
    adjustTextSize();
    displaytime = random(10000, 50000);
    currentLength = 0;
}

function getRandomSentence() {
    let index
    do {
        index = Math.floor(Math.random() * sentences.length)
    } while (usedIndices.includes(index))

    usedIndices.push(index)

    // Reset if all sentences have been used
    if (usedIndices.length === sentences.length) {
        usedIndices = []
    }

    return sentences[index]
}

function adjustTextSize() {
    let targetWidth = windowWidth - (4 * border_left) // 95% of window width

    font_size = minFontSize // Start with minimum font size
    textSize(font_size)

    while (textWidth(sentence) < targetWidth && font_size < maxFontSize) {
        font_size++
        textSize(font_size) // Update the text size for measurement
    }

    if (font_size > maxFontSize) font_size = maxFontSize

    textSize(font_size)
}

function setup() {
    createCanvas(windowWidth, windowHeight)
    lyrics = decompressRLE(compressedLyrics);
    sentences = lyrics.split('\n').filter(line => line.length > 0);
    setInterval(updateSentence, displaytime)
    adjustTextSize()
    textStyle(BOLD)
}

function draw() {
    if (currentLength == 0) adjustTextSize();
    background(0);

    if (displaySentence) {
        fill(255, 255, 255);
        textSize(font_size);

        let displayText = sentence.substring(0, currentLength);
        text(displayText, border_left, windowHeight - border_bottom);

        if (currentLength < sentence.length) {
            currentLength += typingSpeed; // Increase by a constant amount each frame
            cursorVisible = true; // Keep the cursor visible while typing
        } else {
            // Blinking cursor effect
            if (frameCount % cursorBlinkRate === 0) {
                cursorVisible = !cursorVisible; // Toggle cursor visibility
            }
        }

        if (cursorVisible) {
            draw_cursor(displayText);
        }
    }
}

function draw_cursor(displayText) {
    textSize(font_size); // Ensure the font size is set correctly
    let cursorX = textWidth(displayText) + border_left;
    let cursorY = windowHeight - border_bottom;

    fill(255, 0, 0); // Set cursor color (white for visibility)
    noStroke(); // No border for the cursor

    textStyle(NORMAL); 
    text('|', cursorX, cursorY);
    textStyle(BOLD); 
}

function windowResized() {
    adjustTextSize()
    resizeCanvas(windowWidth, windowHeight)
}

function keyPressed() {
    if (key === 'B' || key === 'b') {
        displaySentence = !displaySentence;
    } else if (key === 'c' || key === 'C') {
        cursorHidden = !cursorHidden;
        cursorHidden ? noCursor() : cursor();
    }
}